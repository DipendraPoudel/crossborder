/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QuoteRequestWrapper from '../model/QuoteRequestWrapper';
import QuoteWrapper from '../model/QuoteWrapper';

/**
* Quotes service.
* @module api/QuotesApi
* @version 1.0.0
*/
export default class QuotesApi {

    /**
    * Constructs a new QuotesApi. 
    * @alias module:api/QuotesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quotes operation.
     * @callback module:api/QuotesApi~quotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource provides information on a cross-border payment before it is initiated and submitted. The information provided includes the amount to be credited to the beneficiary, the amount to charge the sender, the Origination Institution settlement amount, the FX rate, and more.  NOTE: For the test to run correctly, please use an unique transaction_reference on each run. 
     * @param {String} partnerId This is a path parameter that accepts the provider assigned identification.  It holds a string of alphanumeric special characters with an maximum length of 35.
     * @param {module:model/QuoteRequestWrapper} quoteRequestWrapper Contains the details of the request message.
     * @param {module:api/QuotesApi~quotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteWrapper}
     */
    quotes(partnerId, quoteRequestWrapper, callback) {
      let postBody = quoteRequestWrapper;
      // verify the required parameter 'partnerId' is set
      if (partnerId === undefined || partnerId === null) {
        throw new Error("Missing the required parameter 'partnerId' when calling quotes");
      }
      // verify the required parameter 'quoteRequestWrapper' is set
      if (quoteRequestWrapper === undefined || quoteRequestWrapper === null) {
        throw new Error("Missing the required parameter 'quoteRequestWrapper' when calling quotes");
      }

      let pathParams = {
        'partner-id': partnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/xml', 'application/json'];
      let accepts = ['application/xml', 'application/json'];
      let returnType = QuoteWrapper;
      return this.apiClient.callApi(
        '/send/v1/partners/{partner-id}/crossborder/quotes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
