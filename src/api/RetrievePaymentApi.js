/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RetrievePaymentWrapper from '../model/RetrievePaymentWrapper';

/**
* RetrievePayment service.
* @module api/RetrievePaymentApi
* @version 1.0.0
*/
export default class RetrievePaymentApi {

    /**
    * Constructs a new RetrievePaymentApi. 
    * @alias module:api/RetrievePaymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPayment operation.
     * @callback module:api/RetrievePaymentApi~getPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrievePaymentWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource is used to retrieve the Payment transaction using the payment ID. When using the Retrieve Payment API resource to check the status of a PENDING payment, it should be used no more than every 30 minutes for each payment being retrieved.  NOTE: For the test to run successfully, please use the payment Id of an existing transaction that was created using the Payment API.
     * This resource is used to retrieve the Payment transaction using the payment ID. When using the Retrieve Payment API resource to check the status of a PENDING payment, it should be used no more than every 30 minutes for each payment being retrieved.  NOTE: For the test to run successfully, please use the payment Id of an existing transaction that was created using the Payment API.
     * @param {String} partnerId This is a path parameter that accepts the provider assigned identification.   It holds a string of alphanumeric special characters with an maximum length of 35.
     * @param {String} paymentId This is a path parameter that accepts the system generated unique payment identifier.  It holds a string of alphanumeric special characters with a maximum length of 31 and a minimum length of 1.
     * @param {module:api/RetrievePaymentApi~getPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrievePaymentWrapper}
     */
    getPayment(partnerId, paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'partnerId' is set
      if (partnerId === undefined || partnerId === null) {
        throw new Error("Missing the required parameter 'partnerId' when calling getPayment");
      }
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling getPayment");
      }

      let pathParams = {
        'partner-id': partnerId,
        'payment-id': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = RetrievePaymentWrapper;
      return this.apiClient.callApi(
        '/send/v1/partners/{partner-id}/crossborder/{payment-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionStatus operation.
     * @callback module:api/RetrievePaymentApi~transactionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrievePaymentWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource is used to retrieve the Payment transaction using the transaction_reference. When using theRetrieve Payment API resource to check the status of a PENDING payment, it should be used no more than every 30 minutes for each payment being retrieved.  NOTE: For the test to run successfully, please use the transaction_reference of an existing transaction that was created using the Payment API.
     * @param {String} partnerId This is a path parameter that accepts the provider assigned identification.  It holds a string of alphanumeric special characters with an maximum length of 35.
     * @param {String} ref This is a path parameter that accepts the client-provided unique reference number of the transaction. The string held must be unique per transaction. Note that when utilizing a quote, this parameter's value must be identical to the value created for the associated quote.  It holds a string of alphanumeric special characters with a maximum length of 40 and a minimum length of 1.
     * @param {module:api/RetrievePaymentApi~transactionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrievePaymentWrapper}
     */
    transactionStatus(partnerId, ref, callback) {
      let postBody = null;
      // verify the required parameter 'partnerId' is set
      if (partnerId === undefined || partnerId === null) {
        throw new Error("Missing the required parameter 'partnerId' when calling transactionStatus");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling transactionStatus");
      }

      let pathParams = {
        'partner-id': partnerId
      };
      let queryParams = {
        'ref': ref
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = RetrievePaymentWrapper;
      return this.apiClient.callApi(
        '/send/v1/partners/{partner-id}/crossborder', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
