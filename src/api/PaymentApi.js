/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaymentRequestWrapper from '../model/PaymentRequestWrapper';
import PaymentWrapper from '../model/PaymentWrapper';

/**
* Payment service.
* @module api/PaymentApi
* @version 1.0.0
*/
export default class PaymentApi {

    /**
    * Constructs a new PaymentApi. 
    * @alias module:api/PaymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the payment operation.
     * @callback module:api/PaymentApi~paymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource is used to initiate and submit a cross-border payment. There are three options available:  Option #1: Payment with a quote - This option allows associating the FX rate and amounts calculated for a previously submitted quote to the payment by including the proposal Id of the quote in the payment request. For these payments, the fields filled in the quote do not need to be provided in the payment, but if they are, they will process without error as long as the data matches what was sent in the Quote that generated the proposal_id. Submitting a successful Quote API call will generate a proposal Id.  Note: An exception is for the bank_code field. If bank_code was provided in the the quote and provided again in the payment, then the newly provided value will be used. If using a proposal_id and the bank_code was provided in the quote, then that value will be automatically copied into the payment.  Option #2: Payment with Carded Rate - In this option, Carded Rate is offered as an opt-in functionality to obtain the FX rates for all the currency pairs that you support, for a valid period of time.   NOTE: Carded rate can be also obtained using the FX Push API or file based approach.  Option #3: Payment without a quote - In this option, the proposal ID is left blank and all required fields for a payment must be provided in the request. For these payments, the FX rate that is valid at the time the payment is submitted, will be applied to the payment and all of the calculated amounts provided in the payment response will be based on this FX rate.  NOTE: For the test to run successfully, please use an unique transaction_reference on each run.
     * @param {String} partnerId This is a path parameter that accepts the provider assigned identification.  It holds a string of alphanumeric special characters with an maximum  length of 35.
     * @param {module:model/PaymentRequestWrapper} paymentRequestWrapper Contains the details of the request message.
     * @param {module:api/PaymentApi~paymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentWrapper}
     */
    payment(partnerId, paymentRequestWrapper, callback) {
      let postBody = paymentRequestWrapper;
      // verify the required parameter 'partnerId' is set
      if (partnerId === undefined || partnerId === null) {
        throw new Error("Missing the required parameter 'partnerId' when calling payment");
      }
      // verify the required parameter 'paymentRequestWrapper' is set
      if (paymentRequestWrapper === undefined || paymentRequestWrapper === null) {
        throw new Error("Missing the required parameter 'paymentRequestWrapper' when calling payment");
      }

      let pathParams = {
        'partner-id': partnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/xml', 'application/json'];
      let accepts = ['application/xml', 'application/json'];
      let returnType = PaymentWrapper;
      return this.apiClient.callApi(
        '/send/v1/partners/{partner-id}/crossborder/payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
