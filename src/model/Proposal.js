/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalDataList from './AdditionalDataList';
import ChargedAmount from './ChargedAmount';
import CreditedAmount from './CreditedAmount';
import PrincipalAmount from './PrincipalAmount';

/**
 * The Proposal model module.
 * @module model/Proposal
 * @version 1.0.0
 */
class Proposal {
    /**
     * Constructs a new <code>Proposal</code>.
     * @alias module:model/Proposal
     */
    constructor() { 
        
        Proposal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Proposal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Proposal} obj Optional instance to populate.
     * @return {module:model/Proposal} The populated <code>Proposal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Proposal();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('fees_included')) {
                obj['fees_included'] = ApiClient.convertToType(data['fees_included'], 'Boolean');
            }
            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'String');
            }
            if (data.hasOwnProperty('quote_fx_rate')) {
                obj['quote_fx_rate'] = ApiClient.convertToType(data['quote_fx_rate'], 'String');
            }
            if (data.hasOwnProperty('charged_amount')) {
                obj['charged_amount'] = ChargedAmount.constructFromObject(data['charged_amount']);
            }
            if (data.hasOwnProperty('credited_amount')) {
                obj['credited_amount'] = CreditedAmount.constructFromObject(data['credited_amount']);
            }
            if (data.hasOwnProperty('principal_amount')) {
                obj['principal_amount'] = PrincipalAmount.constructFromObject(data['principal_amount']);
            }
            if (data.hasOwnProperty('additional_data_list')) {
                obj['additional_data_list'] = AdditionalDataList.constructFromObject(data['additional_data_list']);
            }
            if (data.hasOwnProperty('confirmation_expiry_time')) {
                obj['confirmation_expiry_time'] = ApiClient.convertToType(data['confirmation_expiry_time'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Proposal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Proposal</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['expiration_date'] && !(typeof data['expiration_date'] === 'string' || data['expiration_date'] instanceof String)) {
            throw new Error("Expected the field `expiration_date` to be a primitive type in the JSON string but got " + data['expiration_date']);
        }
        // ensure the json data is a string
        if (data['quote_fx_rate'] && !(typeof data['quote_fx_rate'] === 'string' || data['quote_fx_rate'] instanceof String)) {
            throw new Error("Expected the field `quote_fx_rate` to be a primitive type in the JSON string but got " + data['quote_fx_rate']);
        }
        // validate the optional field `charged_amount`
        if (data['charged_amount']) { // data not null
          ChargedAmount.validateJSON(data['charged_amount']);
        }
        // validate the optional field `credited_amount`
        if (data['credited_amount']) { // data not null
          CreditedAmount.validateJSON(data['credited_amount']);
        }
        // validate the optional field `principal_amount`
        if (data['principal_amount']) { // data not null
          PrincipalAmount.validateJSON(data['principal_amount']);
        }
        // validate the optional field `additional_data_list`
        if (data['additional_data_list']) { // data not null
          AdditionalDataList.validateJSON(data['additional_data_list']);
        }
        // ensure the json data is a string
        if (data['confirmation_expiry_time'] && !(typeof data['confirmation_expiry_time'] === 'string' || data['confirmation_expiry_time'] instanceof String)) {
            throw new Error("Expected the field `confirmation_expiry_time` to be a primitive type in the JSON string but got " + data['confirmation_expiry_time']);
        }

        return true;
    }


}



/**
 * This parameter contains a system generated unique proposal identifier.  It holds a string of alphanumeric special characters with a maximum length of 30 and a minimum length of 0.
 * @member {String} id
 */
Proposal.prototype['id'] = undefined;

/**
 * This parameter contains the type of proposals.proposal[].resource type. It is conditional and will only hold a string with the value \"proposal\". Note that it is provided if proposals.proposal[] is populated.
 * @member {String} resource_type
 */
Proposal.prototype['resource_type'] = undefined;

/**
 * This parameter indicates how the sender_amount was interpreted to compute the amount fields in this proposal  It holds a Boolean value of either \"true\" or \"false\".
 * @member {Boolean} fees_included
 */
Proposal.prototype['fees_included'] = undefined;

/**
 * The date and time when this proposal will expire, i.e. after which it can no longer be used to initiate a payment.  It holds an \"ISO 8601\" timestamp of the format. For JSON:YYYY-MMDDTHH:MM:SSÂ±hh[:mm] , For XML: YYYY-MMDDTHH:MM:SS.SSSÂ±hh[:mm]
 * @member {String} expiration_date
 */
Proposal.prototype['expiration_date'] = undefined;

/**
 * This parameter contains the rate used for the given corridor transaction. It is the rate used to calculate the sender or originating institution amount into the beneficiary amount.   The format for this value is 1 to 10 numbers to the left of the decimal and 1 to 10 numbers to the right of the decimal.
 * @member {String} quote_fx_rate
 */
Proposal.prototype['quote_fx_rate'] = undefined;

/**
 * @member {module:model/ChargedAmount} charged_amount
 */
Proposal.prototype['charged_amount'] = undefined;

/**
 * @member {module:model/CreditedAmount} credited_amount
 */
Proposal.prototype['credited_amount'] = undefined;

/**
 * @member {module:model/PrincipalAmount} principal_amount
 */
Proposal.prototype['principal_amount'] = undefined;

/**
 * @member {module:model/AdditionalDataList} additional_data_list
 */
Proposal.prototype['additional_data_list'] = undefined;

/**
 * This parameter contains the time when this proposal will expire, i.e. after which it can no longer be used to confirm.  It holds an \"ISO 8601\" timestamp of the format \"YYYY-MMDDTHH:MM:SS.SSSÂ±hh[:mm]\" 
 * @member {String} confirmation_expiry_time
 */
Proposal.prototype['confirmation_expiry_time'] = undefined;






export default Proposal;

