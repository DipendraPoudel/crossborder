/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Tier model module.
 * @module model/Tier
 * @version 1.0.0
 */
class Tier {
    /**
     * Constructs a new <code>Tier</code>.
     * See child attributes
     * @alias module:model/Tier
     */
    constructor() { 
        
        Tier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tier} obj Optional instance to populate.
     * @return {module:model/Tier} The populated <code>Tier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tier();

            if (data.hasOwnProperty('from_amount')) {
                obj['from_amount'] = ApiClient.convertToType(data['from_amount'], 'String');
            }
            if (data.hasOwnProperty('rate_id')) {
                obj['rate_id'] = ApiClient.convertToType(data['rate_id'], 'String');
            }
            if (data.hasOwnProperty('ask_rate')) {
                obj['ask_rate'] = ApiClient.convertToType(data['ask_rate'], 'String');
            }
            if (data.hasOwnProperty('mid_rate')) {
                obj['mid_rate'] = ApiClient.convertToType(data['mid_rate'], 'String');
            }
            if (data.hasOwnProperty('bid_rate')) {
                obj['bid_rate'] = ApiClient.convertToType(data['bid_rate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tier</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['from_amount'] && !(typeof data['from_amount'] === 'string' || data['from_amount'] instanceof String)) {
            throw new Error("Expected the field `from_amount` to be a primitive type in the JSON string but got " + data['from_amount']);
        }
        // ensure the json data is a string
        if (data['rate_id'] && !(typeof data['rate_id'] === 'string' || data['rate_id'] instanceof String)) {
            throw new Error("Expected the field `rate_id` to be a primitive type in the JSON string but got " + data['rate_id']);
        }
        // ensure the json data is a string
        if (data['ask_rate'] && !(typeof data['ask_rate'] === 'string' || data['ask_rate'] instanceof String)) {
            throw new Error("Expected the field `ask_rate` to be a primitive type in the JSON string but got " + data['ask_rate']);
        }
        // ensure the json data is a string
        if (data['mid_rate'] && !(typeof data['mid_rate'] === 'string' || data['mid_rate'] instanceof String)) {
            throw new Error("Expected the field `mid_rate` to be a primitive type in the JSON string but got " + data['mid_rate']);
        }
        // ensure the json data is a string
        if (data['bid_rate'] && !(typeof data['bid_rate'] === 'string' || data['bid_rate'] instanceof String)) {
            throw new Error("Expected the field `bid_rate` to be a primitive type in the JSON string but got " + data['bid_rate']);
        }

        return true;
    }


}



/**
 * NOTE: This is applicable for future use only; the value will not be provided, and the field will be blank.  Future use: This parameter contains the starting amount for tiered rate calculation in \"FROM\" currency.  It holds a numeric value with a maximum length of 22.  For partners utilizing non-tiered pricing, this value will always be zero blank. For partners utilizing tiered pricing, this value will represent the starting amount for the tier.
 * @member {String} from_amount
 */
Tier.prototype['from_amount'] = undefined;

/**
 * This parameter contains a system generated unique ID associated with the rate. This ID must be included in the payment in order to identify to the system which rate should be used for payment processing. It holds an alphanumeric value with a maximum length of 64. Example: 11ig8xy5uc10fm11cymngqstcqq
 * @member {String} rate_id
 */
Tier.prototype['rate_id'] = undefined;

/**
 * NOTE: This is applicable for future use only; the value will not be provided, and the field will be blank.  Future use: This parameter contains the ask rate value for this tier, which is the price at which market participants are willing to sell currencies.  The format for this value is 1 to 10 numbers to the left of the decimal and 1 to 10 numbers to the right of the decimal. 
 * @member {String} ask_rate
 */
Tier.prototype['ask_rate'] = undefined;

/**
 * NOTE: This is applicable for future use only; the value will not be provided, and the field will be blank.  Future use: This parameter contains the mid-market rate value for this tier, which is the mid-point between the buy and the sell prices of the two currencies to an exchange rate. It holds an integer value with a maximum length of 21.  The format for this value is 1 to 10 numbers to the left of the decimal and 1 to 10 numbers to the right of the decimal.
 * @member {String} mid_rate
 */
Tier.prototype['mid_rate'] = undefined;

/**
 * This parameter contains the rate used for the given corridor transaction. It is the rate used to calculate the sender or originating institution amount into the beneficiary amount.  The format for this value is 1 to 10 numbers to the left of the decimal and 1 to 10 numbers to the right of the decimal. 
 * @member {String} bid_rate
 */
Tier.prototype['bid_rate'] = undefined;






export default Tier;

