/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataField from './DataField';

/**
 * The AdditionalData model module.
 * @module model/AdditionalData
 * @version 1.0.0
 */
class AdditionalData {
    /**
     * Constructs a new <code>AdditionalData</code>.
     * This parameter contains the list of name/value pairs containing additional parameter values. This parameter is conditional, and only required for specific receiving service provider endpoints identified as part of corridor data details. If this field is needed, then necessary names and values will be supplied during onboarding. There can be zero to many fields sent in the payload.
     * @alias module:model/AdditionalData
     */
    constructor() { 
        
        AdditionalData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalData} obj Optional instance to populate.
     * @return {module:model/AdditionalData} The populated <code>AdditionalData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalData();

            if (data.hasOwnProperty('data_field')) {
                obj['data_field'] = ApiClient.convertToType(data['data_field'], [DataField]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalData</code>.
     */
    static validateJSON(data) {
        if (data['data_field']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data_field'])) {
                throw new Error("Expected the field `data_field` to be an array in the JSON data but got " + data['data_field']);
            }
            // validate the optional field `data_field` (array)
            for (const item of data['data_field']) {
                DataField.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * A name/value pair which represents a data field
 * @member {Array.<module:model/DataField>} data_field
 */
AdditionalData.prototype['data_field'] = undefined;






export default AdditionalData;

