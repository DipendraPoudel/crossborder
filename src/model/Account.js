/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BalanceDetails from './BalanceDetails';

/**
 * The Account model module.
 * @module model/Account
 * @version 1.0.0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * Account details along with all associated balances.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('settlementCurrency')) {
                obj['settlementCurrency'] = ApiClient.convertToType(data['settlementCurrency'], 'String');
            }
            if (data.hasOwnProperty('accountState')) {
                obj['accountState'] = ApiClient.convertToType(data['accountState'], 'String');
            }
            if (data.hasOwnProperty('openingBalanceTimestamp')) {
                obj['openingBalanceTimestamp'] = ApiClient.convertToType(data['openingBalanceTimestamp'], 'String');
            }
            if (data.hasOwnProperty('balanceAsOfTimestamp')) {
                obj['balanceAsOfTimestamp'] = ApiClient.convertToType(data['balanceAsOfTimestamp'], 'String');
            }
            if (data.hasOwnProperty('balanceDetails')) {
                obj['balanceDetails'] = BalanceDetails.constructFromObject(data['balanceDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['settlementCurrency'] && !(typeof data['settlementCurrency'] === 'string' || data['settlementCurrency'] instanceof String)) {
            throw new Error("Expected the field `settlementCurrency` to be a primitive type in the JSON string but got " + data['settlementCurrency']);
        }
        // ensure the json data is a string
        if (data['accountState'] && !(typeof data['accountState'] === 'string' || data['accountState'] instanceof String)) {
            throw new Error("Expected the field `accountState` to be a primitive type in the JSON string but got " + data['accountState']);
        }
        // ensure the json data is a string
        if (data['openingBalanceTimestamp'] && !(typeof data['openingBalanceTimestamp'] === 'string' || data['openingBalanceTimestamp'] instanceof String)) {
            throw new Error("Expected the field `openingBalanceTimestamp` to be a primitive type in the JSON string but got " + data['openingBalanceTimestamp']);
        }
        // ensure the json data is a string
        if (data['balanceAsOfTimestamp'] && !(typeof data['balanceAsOfTimestamp'] === 'string' || data['balanceAsOfTimestamp'] instanceof String)) {
            throw new Error("Expected the field `balanceAsOfTimestamp` to be a primitive type in the JSON string but got " + data['balanceAsOfTimestamp']);
        }
        // validate the optional field `balanceDetails`
        if (data['balanceDetails']) { // data not null
          BalanceDetails.validateJSON(data['balanceDetails']);
        }

        return true;
    }


}



/**
 * Settlement Account Balance Identifier.
 * @member {String} accountId
 */
Account.prototype['accountId'] = undefined;

/**
 * Currency for settlement should have strict length 3 only.
 * @member {String} settlementCurrency
 */
Account.prototype['settlementCurrency'] = undefined;

/**
 * Valid value ACTIVE
 * @member {String} accountState
 */
Account.prototype['accountState'] = undefined;

/**
 * Time at which opening balance is calculated on the particular day. Its a time-only value with zone details, And the format looks like [HH:MM:SSZ].
 * @member {String} openingBalanceTimestamp
 */
Account.prototype['openingBalanceTimestamp'] = undefined;

/**
 * Date and time at which  balance amount is calculated on the particular day as an ISO 8601 Timestamp in UTC. [YYYY-MM-DDTHH:MM:SSZ].
 * @member {String} balanceAsOfTimestamp
 */
Account.prototype['balanceAsOfTimestamp'] = undefined;

/**
 * @member {module:model/BalanceDetails} balanceDetails
 */
Account.prototype['balanceDetails'] = undefined;






export default Account;

