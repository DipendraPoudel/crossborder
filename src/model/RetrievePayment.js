/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalDataList from './AdditionalDataList';
import ChargedAmount from './ChargedAmount';
import CreditedAmount from './CreditedAmount';
import FeesAmount from './FeesAmount';
import FxType from './FxType';
import PaymentAmount from './PaymentAmount';
import PrincipalAmount from './PrincipalAmount';
import RejectedStatus from './RejectedStatus';
import ReturnStatus from './ReturnStatus';
import SettlementDetails from './SettlementDetails';

/**
 * The RetrievePayment model module.
 * @module model/RetrievePayment
 * @version 1.0.0
 */
class RetrievePayment {
    /**
     * Constructs a new <code>RetrievePayment</code>.
     * Response details
     * @alias module:model/RetrievePayment
     */
    constructor() { 
        
        RetrievePayment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RetrievePayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetrievePayment} obj Optional instance to populate.
     * @return {module:model/RetrievePayment} The populated <code>RetrievePayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetrievePayment();

            if (data.hasOwnProperty('transaction_reference')) {
                obj['transaction_reference'] = ApiClient.convertToType(data['transaction_reference'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('proposal_id')) {
                obj['proposal_id'] = ApiClient.convertToType(data['proposal_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_timestamp')) {
                obj['status_timestamp'] = ApiClient.convertToType(data['status_timestamp'], 'String');
            }
            if (data.hasOwnProperty('pending_stage')) {
                obj['pending_stage'] = ApiClient.convertToType(data['pending_stage'], 'String');
            }
            if (data.hasOwnProperty('pending_max_completion_date')) {
                obj['pending_max_completion_date'] = ApiClient.convertToType(data['pending_max_completion_date'], 'String');
            }
            if (data.hasOwnProperty('fees_amount')) {
                obj['fees_amount'] = FeesAmount.constructFromObject(data['fees_amount']);
            }
            if (data.hasOwnProperty('charged_amount')) {
                obj['charged_amount'] = ChargedAmount.constructFromObject(data['charged_amount']);
            }
            if (data.hasOwnProperty('credited_amount')) {
                obj['credited_amount'] = CreditedAmount.constructFromObject(data['credited_amount']);
            }
            if (data.hasOwnProperty('principal_amount')) {
                obj['principal_amount'] = PrincipalAmount.constructFromObject(data['principal_amount']);
            }
            if (data.hasOwnProperty('sender_account_uri')) {
                obj['sender_account_uri'] = ApiClient.convertToType(data['sender_account_uri'], 'String');
            }
            if (data.hasOwnProperty('recipient_account_uri')) {
                obj['recipient_account_uri'] = ApiClient.convertToType(data['recipient_account_uri'], 'String');
            }
            if (data.hasOwnProperty('payment_amount')) {
                obj['payment_amount'] = PaymentAmount.constructFromObject(data['payment_amount']);
            }
            if (data.hasOwnProperty('payment_origination_country')) {
                obj['payment_origination_country'] = ApiClient.convertToType(data['payment_origination_country'], 'String');
            }
            if (data.hasOwnProperty('fx_type')) {
                obj['fx_type'] = FxType.constructFromObject(data['fx_type']);
            }
            if (data.hasOwnProperty('receiving_bank_name')) {
                obj['receiving_bank_name'] = ApiClient.convertToType(data['receiving_bank_name'], 'String');
            }
            if (data.hasOwnProperty('receiving_bank_branch_name')) {
                obj['receiving_bank_branch_name'] = ApiClient.convertToType(data['receiving_bank_branch_name'], 'String');
            }
            if (data.hasOwnProperty('bank_code')) {
                obj['bank_code'] = ApiClient.convertToType(data['bank_code'], 'String');
            }
            if (data.hasOwnProperty('payment_type')) {
                obj['payment_type'] = ApiClient.convertToType(data['payment_type'], 'String');
            }
            if (data.hasOwnProperty('source_of_income')) {
                obj['source_of_income'] = ApiClient.convertToType(data['source_of_income'], 'String');
            }
            if (data.hasOwnProperty('settlement_details')) {
                obj['settlement_details'] = SettlementDetails.constructFromObject(data['settlement_details']);
            }
            if (data.hasOwnProperty('cashout_code')) {
                obj['cashout_code'] = ApiClient.convertToType(data['cashout_code'], 'String');
            }
            if (data.hasOwnProperty('fx_rate')) {
                obj['fx_rate'] = ApiClient.convertToType(data['fx_rate'], 'String');
            }
            if (data.hasOwnProperty('additional_data_list')) {
                obj['additional_data_list'] = AdditionalDataList.constructFromObject(data['additional_data_list']);
            }
            if (data.hasOwnProperty('payment_file_identifier')) {
                obj['payment_file_identifier'] = ApiClient.convertToType(data['payment_file_identifier'], 'String');
            }
            if (data.hasOwnProperty('card_rate_id')) {
                obj['card_rate_id'] = ApiClient.convertToType(data['card_rate_id'], 'String');
            }
            if (data.hasOwnProperty('rejected_status')) {
                obj['rejected_status'] = RejectedStatus.constructFromObject(data['rejected_status']);
            }
            if (data.hasOwnProperty('return_status')) {
                obj['return_status'] = ReturnStatus.constructFromObject(data['return_status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetrievePayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetrievePayment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['transaction_reference'] && !(typeof data['transaction_reference'] === 'string' || data['transaction_reference'] instanceof String)) {
            throw new Error("Expected the field `transaction_reference` to be a primitive type in the JSON string but got " + data['transaction_reference']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['proposal_id'] && !(typeof data['proposal_id'] === 'string' || data['proposal_id'] instanceof String)) {
            throw new Error("Expected the field `proposal_id` to be a primitive type in the JSON string but got " + data['proposal_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['status_timestamp'] && !(typeof data['status_timestamp'] === 'string' || data['status_timestamp'] instanceof String)) {
            throw new Error("Expected the field `status_timestamp` to be a primitive type in the JSON string but got " + data['status_timestamp']);
        }
        // ensure the json data is a string
        if (data['pending_stage'] && !(typeof data['pending_stage'] === 'string' || data['pending_stage'] instanceof String)) {
            throw new Error("Expected the field `pending_stage` to be a primitive type in the JSON string but got " + data['pending_stage']);
        }
        // ensure the json data is a string
        if (data['pending_max_completion_date'] && !(typeof data['pending_max_completion_date'] === 'string' || data['pending_max_completion_date'] instanceof String)) {
            throw new Error("Expected the field `pending_max_completion_date` to be a primitive type in the JSON string but got " + data['pending_max_completion_date']);
        }
        // validate the optional field `fees_amount`
        if (data['fees_amount']) { // data not null
          FeesAmount.validateJSON(data['fees_amount']);
        }
        // validate the optional field `charged_amount`
        if (data['charged_amount']) { // data not null
          ChargedAmount.validateJSON(data['charged_amount']);
        }
        // validate the optional field `credited_amount`
        if (data['credited_amount']) { // data not null
          CreditedAmount.validateJSON(data['credited_amount']);
        }
        // validate the optional field `principal_amount`
        if (data['principal_amount']) { // data not null
          PrincipalAmount.validateJSON(data['principal_amount']);
        }
        // ensure the json data is a string
        if (data['sender_account_uri'] && !(typeof data['sender_account_uri'] === 'string' || data['sender_account_uri'] instanceof String)) {
            throw new Error("Expected the field `sender_account_uri` to be a primitive type in the JSON string but got " + data['sender_account_uri']);
        }
        // ensure the json data is a string
        if (data['recipient_account_uri'] && !(typeof data['recipient_account_uri'] === 'string' || data['recipient_account_uri'] instanceof String)) {
            throw new Error("Expected the field `recipient_account_uri` to be a primitive type in the JSON string but got " + data['recipient_account_uri']);
        }
        // validate the optional field `payment_amount`
        if (data['payment_amount']) { // data not null
          PaymentAmount.validateJSON(data['payment_amount']);
        }
        // ensure the json data is a string
        if (data['payment_origination_country'] && !(typeof data['payment_origination_country'] === 'string' || data['payment_origination_country'] instanceof String)) {
            throw new Error("Expected the field `payment_origination_country` to be a primitive type in the JSON string but got " + data['payment_origination_country']);
        }
        // validate the optional field `fx_type`
        if (data['fx_type']) { // data not null
          FxType.validateJSON(data['fx_type']);
        }
        // ensure the json data is a string
        if (data['receiving_bank_name'] && !(typeof data['receiving_bank_name'] === 'string' || data['receiving_bank_name'] instanceof String)) {
            throw new Error("Expected the field `receiving_bank_name` to be a primitive type in the JSON string but got " + data['receiving_bank_name']);
        }
        // ensure the json data is a string
        if (data['receiving_bank_branch_name'] && !(typeof data['receiving_bank_branch_name'] === 'string' || data['receiving_bank_branch_name'] instanceof String)) {
            throw new Error("Expected the field `receiving_bank_branch_name` to be a primitive type in the JSON string but got " + data['receiving_bank_branch_name']);
        }
        // ensure the json data is a string
        if (data['bank_code'] && !(typeof data['bank_code'] === 'string' || data['bank_code'] instanceof String)) {
            throw new Error("Expected the field `bank_code` to be a primitive type in the JSON string but got " + data['bank_code']);
        }
        // ensure the json data is a string
        if (data['payment_type'] && !(typeof data['payment_type'] === 'string' || data['payment_type'] instanceof String)) {
            throw new Error("Expected the field `payment_type` to be a primitive type in the JSON string but got " + data['payment_type']);
        }
        // ensure the json data is a string
        if (data['source_of_income'] && !(typeof data['source_of_income'] === 'string' || data['source_of_income'] instanceof String)) {
            throw new Error("Expected the field `source_of_income` to be a primitive type in the JSON string but got " + data['source_of_income']);
        }
        // validate the optional field `settlement_details`
        if (data['settlement_details']) { // data not null
          SettlementDetails.validateJSON(data['settlement_details']);
        }
        // ensure the json data is a string
        if (data['cashout_code'] && !(typeof data['cashout_code'] === 'string' || data['cashout_code'] instanceof String)) {
            throw new Error("Expected the field `cashout_code` to be a primitive type in the JSON string but got " + data['cashout_code']);
        }
        // ensure the json data is a string
        if (data['fx_rate'] && !(typeof data['fx_rate'] === 'string' || data['fx_rate'] instanceof String)) {
            throw new Error("Expected the field `fx_rate` to be a primitive type in the JSON string but got " + data['fx_rate']);
        }
        // validate the optional field `additional_data_list`
        if (data['additional_data_list']) { // data not null
          AdditionalDataList.validateJSON(data['additional_data_list']);
        }
        // ensure the json data is a string
        if (data['payment_file_identifier'] && !(typeof data['payment_file_identifier'] === 'string' || data['payment_file_identifier'] instanceof String)) {
            throw new Error("Expected the field `payment_file_identifier` to be a primitive type in the JSON string but got " + data['payment_file_identifier']);
        }
        // ensure the json data is a string
        if (data['card_rate_id'] && !(typeof data['card_rate_id'] === 'string' || data['card_rate_id'] instanceof String)) {
            throw new Error("Expected the field `card_rate_id` to be a primitive type in the JSON string but got " + data['card_rate_id']);
        }
        // validate the optional field `rejected_status`
        if (data['rejected_status']) { // data not null
          RejectedStatus.validateJSON(data['rejected_status']);
        }
        // validate the optional field `return_status`
        if (data['return_status']) { // data not null
          ReturnStatus.validateJSON(data['return_status']);
        }

        return true;
    }


}



/**
 * This parameter contains the client provided unique reference number.  It holds a string of alphanumeric special characters with a maximum length of 40 and a minimum length of 1.
 * @member {String} transaction_reference
 */
RetrievePayment.prototype['transaction_reference'] = undefined;

/**
 * This parameter contains the system generated unique payment identifier.   It holds a string of alphanumeric special characters with a maximum length of 31 and a minimum length of 0.
 * @member {String} id
 */
RetrievePayment.prototype['id'] = undefined;

/**
 * The resource type of the payment. This will always be set to the value of \"payment\" 
 * @member {String} resource_type
 */
RetrievePayment.prototype['resource_type'] = undefined;

/**
 * Date and time the original payment was created.  It holds an \"ISO 8601\" timestamp of the format \"YYYY-MM-DDTHH:MM:SSÂ±hh[:mm]\"
 * @member {String} created
 */
RetrievePayment.prototype['created'] = undefined;

/**
 * This parameter specifies the proposal that was executed for this payment.  It holds a string of alphanumeric special characters with a maximum length of 30 and a minimum length of 0.
 * @member {String} proposal_id
 */
RetrievePayment.prototype['proposal_id'] = undefined;

/**
 * This parameter contains the status of the payment. The value will be one of the following: SUCCESS, PENDING, REJECTED, RETURNED. 
 * @member {String} status
 */
RetrievePayment.prototype['status'] = undefined;

/**
 * Timestamp of when the status was changed to its current value.  It holds an \"ISO 8601\" timestamp of the format \"YYYY-MM-DDTHH:MM:SSÂ±hh[:mm]\"
 * @member {String} status_timestamp
 */
RetrievePayment.prototype['status_timestamp'] = undefined;

/**
 * This parameter contains an identifier showing the current transaction's pending stage. Note that this parameter is only returned if the status is PENDING. Refer to the \"Pending Stages section in Payment API\" for valid values.  It is conditional and holds a string of alphabet characters with a maximum length of 30 and a minimum length of 1. 
 * @member {String} pending_stage
 */
RetrievePayment.prototype['pending_stage'] = undefined;

/**
 * This value is used for Mastercard Send internal processes only and it SHOULD NOT be used as an indicator of funds delivery into the beneficiary account or passed to the sending customers by an OI.  It is conditional and only returned if the status is PENDING.  It holds an \"ISO 8601\" timestamp of the format. For JSON: YYYY-MMDDTHH:MM:SSÂ±hh[:mm] , For XML: YYYY-MMDDTHH:MM:SS.SSSÂ±hh[:mm]
 * @member {String} pending_max_completion_date
 */
RetrievePayment.prototype['pending_max_completion_date'] = undefined;

/**
 * @member {module:model/FeesAmount} fees_amount
 */
RetrievePayment.prototype['fees_amount'] = undefined;

/**
 * @member {module:model/ChargedAmount} charged_amount
 */
RetrievePayment.prototype['charged_amount'] = undefined;

/**
 * @member {module:model/CreditedAmount} credited_amount
 */
RetrievePayment.prototype['credited_amount'] = undefined;

/**
 * @member {module:model/PrincipalAmount} principal_amount
 */
RetrievePayment.prototype['principal_amount'] = undefined;

/**
 * For all transactions, including nested payments, the Sender Account URI scheme is a mandatory parameter based on the account that is initiating the transaction and must contain the ultimate sender's unique account details for the actual mobile wallet, ewallet, account identifier, bank account or card that is initiating the transaction.  Accordingly, this field should not include a blanket or general account managed by the Debtor Agent.  It holds a string of alphanumeric special characters with a maximum length of 200 and a minimum length of 1.
 * @member {String} sender_account_uri
 */
RetrievePayment.prototype['sender_account_uri'] = undefined;

/**
 * This parameter contains the URI identifying beneficiary's account to receive the payment.  It is conditional and holds a string of alphanumeric special characters with a maximum length of 200 and a minimum length of 1. Refer to the \"Recipient Account URI\" section on \"Additional Resources\" page for details about scheme specific data.
 * @member {String} recipient_account_uri
 */
RetrievePayment.prototype['recipient_account_uri'] = undefined;

/**
 * @member {module:model/PaymentAmount} payment_amount
 */
RetrievePayment.prototype['payment_amount'] = undefined;

/**
 * This parameter contains the three-letter \"ISO 3166-1 alpha-3\" country code representing the country in which the payment is being initiated.  It holds a string of alphabet characters with an exact length of three.
 * @member {String} payment_origination_country
 */
RetrievePayment.prototype['payment_origination_country'] = undefined;

/**
 * @member {module:model/FxType} fx_type
 */
RetrievePayment.prototype['fx_type'] = undefined;

/**
 * This parameter contains the name of the bank holding the receiving account.Note that it is provided only for specific bank service provider end points identified as part of corridor data details.   It is conditional and holds a string of alphanumeric special characters with a maximum length of 140 and a minimum length of 1. 
 * @member {String} receiving_bank_name
 */
RetrievePayment.prototype['receiving_bank_name'] = undefined;

/**
 * This parameter contains the name of the bank branch holding the receiving account. Note that it is provided only for specific bank service provider end points identified as part of corridor data details.   It is conditional and holds a string of alphanumeric special characters with a maximum length of 140 and a minimum length of 1
 * @member {String} receiving_bank_branch_name
 */
RetrievePayment.prototype['receiving_bank_branch_name'] = undefined;

/**
 * This parameter contains the bank code associated with the bank name and bank identifier code (BIC) provided by the customer. Note that it is provided only for specific bank service provider end points identified as part of corridor data details.   It is conditional and holds a string of alphanumeric special characters with a maximum length of 225 and a minimum length of 1. 
 * @member {String} bank_code
 */
RetrievePayment.prototype['bank_code'] = undefined;

/**
 * This parameter contains the three-digit code for the type of transaction that is being submitted. Available types and their uses are provided below:  B2P: Business Disbursement to Person - A disbursement of funds from a business to an individual account.  B2B: Business to Business- A transfer of funds from one business to another.  G2P: Government to Person - A disbursement of funds from a government agency to a private individual person's account.  P2P: Person to Person - A transfer of funds from one private individual person's account to another private individual person's account.  P2B: Person to Business - A payment by an individual person to a business  It holds a string of alphabet characters with a maximum length of three and a minimum length of zero.
 * @member {String} payment_type
 */
RetrievePayment.prototype['payment_type'] = undefined;

/**
 * This parameter contains the sender's identification of the source of the funds being submitted. Note that it is provided only for specific receiving service provider end points identified as part of corridor data details. Valid values will be provided during onboarding.  It is conditional and holds a string of alphanumeric special characters with a maximum length of 35 and a minimum length of 1.
 * @member {String} source_of_income
 */
RetrievePayment.prototype['source_of_income'] = undefined;

/**
 * @member {module:model/SettlementDetails} settlement_details
 */
RetrievePayment.prototype['settlement_details'] = undefined;

/**
 * This parameter contains the code or phrase passed by cash out receiving providers. This value needs to be accepted and passed to the sending consumer in P2P transactions.  The sending consumer will need to provide this value to the beneficiary in order for the beneficiary to pick up the funds from the receiving service provider.  Note that is  will only be provided when the receiving service provider is a cash-out location.   It is conditional and holds a string of alphanumeric special characters with a maximum length of 30 and a minimum length of 1. 
 * @member {String} cashout_code
 */
RetrievePayment.prototype['cashout_code'] = undefined;

/**
 * This parameter contains the rate used for the given corridor transaction. It is the rate used to calculate the sender or originating institution amount into the beneficiary amount.  The format for this value is 1 to 10 numbers to the left of the decimal and 1 to 10 numbers to the right of the decimal.
 * @member {String} fx_rate
 */
RetrievePayment.prototype['fx_rate'] = undefined;

/**
 * @member {module:model/AdditionalDataList} additional_data_list
 */
RetrievePayment.prototype['additional_data_list'] = undefined;

/**
 * This parameter identifies the payment file in which this specific payment was submitted by the originator. Note that it is provided if the payment was generated via a batch payment file. Will be blank if not generated via a batch payment file.  It is conditional and holds a string of alphanumeric special characters with a maximum length of 35 and a minimum length of 1. 
 * @member {String} payment_file_identifier
 */
RetrievePayment.prototype['payment_file_identifier'] = undefined;

/**
 * This Parameter contains the System generated Rate ID associated with a currency pair that will be used in a transaction. This ID will be included by the OI in the Payment request and provided to the OI in the Rate File / API for those customers configured to receive this rate information. Note this value must not be provided if a proposal_id is being used in the payment because the rate applied to the payment will be based on the quote provided.  It is an optional parameter that holds a string of alphanumeric special characters with a maximum length of 35 and a minimum length of 1.
 * @member {String} card_rate_id
 */
RetrievePayment.prototype['card_rate_id'] = undefined;

/**
 * @member {module:model/RejectedStatus} rejected_status
 */
RetrievePayment.prototype['rejected_status'] = undefined;

/**
 * @member {module:model/ReturnStatus} return_status
 */
RetrievePayment.prototype['return_status'] = undefined;






export default RetrievePayment;

