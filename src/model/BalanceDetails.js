/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailableBalance from './AvailableBalance';
import OpeningBalance from './OpeningBalance';
import ProcessedAmount from './ProcessedAmount';
import ReservedBalance from './ReservedBalance';
import SettlementAccountBalance from './SettlementAccountBalance';
import ThresholdAmount from './ThresholdAmount';

/**
 * The BalanceDetails model module.
 * @module model/BalanceDetails
 * @version 1.0.0
 */
class BalanceDetails {
    /**
     * Constructs a new <code>BalanceDetails</code>.
     * Balance details associated with the account.
     * @alias module:model/BalanceDetails
     */
    constructor() { 
        
        BalanceDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BalanceDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BalanceDetails} obj Optional instance to populate.
     * @return {module:model/BalanceDetails} The populated <code>BalanceDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BalanceDetails();

            if (data.hasOwnProperty('openingBalance')) {
                obj['openingBalance'] = OpeningBalance.constructFromObject(data['openingBalance']);
            }
            if (data.hasOwnProperty('processedAmount')) {
                obj['processedAmount'] = ProcessedAmount.constructFromObject(data['processedAmount']);
            }
            if (data.hasOwnProperty('reservedBalance')) {
                obj['reservedBalance'] = ReservedBalance.constructFromObject(data['reservedBalance']);
            }
            if (data.hasOwnProperty('availableBalance')) {
                obj['availableBalance'] = AvailableBalance.constructFromObject(data['availableBalance']);
            }
            if (data.hasOwnProperty('settlementAccountBalance')) {
                obj['settlementAccountBalance'] = SettlementAccountBalance.constructFromObject(data['settlementAccountBalance']);
            }
            if (data.hasOwnProperty('thresholdAmount')) {
                obj['thresholdAmount'] = ThresholdAmount.constructFromObject(data['thresholdAmount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BalanceDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BalanceDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `openingBalance`
        if (data['openingBalance']) { // data not null
          OpeningBalance.validateJSON(data['openingBalance']);
        }
        // validate the optional field `processedAmount`
        if (data['processedAmount']) { // data not null
          ProcessedAmount.validateJSON(data['processedAmount']);
        }
        // validate the optional field `reservedBalance`
        if (data['reservedBalance']) { // data not null
          ReservedBalance.validateJSON(data['reservedBalance']);
        }
        // validate the optional field `availableBalance`
        if (data['availableBalance']) { // data not null
          AvailableBalance.validateJSON(data['availableBalance']);
        }
        // validate the optional field `settlementAccountBalance`
        if (data['settlementAccountBalance']) { // data not null
          SettlementAccountBalance.validateJSON(data['settlementAccountBalance']);
        }
        // validate the optional field `thresholdAmount`
        if (data['thresholdAmount']) { // data not null
          ThresholdAmount.validateJSON(data['thresholdAmount']);
        }

        return true;
    }


}



/**
 * @member {module:model/OpeningBalance} openingBalance
 */
BalanceDetails.prototype['openingBalance'] = undefined;

/**
 * @member {module:model/ProcessedAmount} processedAmount
 */
BalanceDetails.prototype['processedAmount'] = undefined;

/**
 * @member {module:model/ReservedBalance} reservedBalance
 */
BalanceDetails.prototype['reservedBalance'] = undefined;

/**
 * @member {module:model/AvailableBalance} availableBalance
 */
BalanceDetails.prototype['availableBalance'] = undefined;

/**
 * @member {module:model/SettlementAccountBalance} settlementAccountBalance
 */
BalanceDetails.prototype['settlementAccountBalance'] = undefined;

/**
 * @member {module:model/ThresholdAmount} thresholdAmount
 */
BalanceDetails.prototype['thresholdAmount'] = undefined;






export default BalanceDetails;

