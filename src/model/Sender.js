/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import GovernmentIds from './GovernmentIds';

/**
 * The Sender model module.
 * @module model/Sender
 * @version 1.0.0
 */
class Sender {
    /**
     * Constructs a new <code>Sender</code>.
     * Sender name and address information is required for a payment transfer. 
     * @alias module:model/Sender
     */
    constructor() { 
        
        Sender.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Sender</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sender} obj Optional instance to populate.
     * @return {module:model/Sender} The populated <code>Sender</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sender();

            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('middle_name')) {
                obj['middle_name'] = ApiClient.convertToType(data['middle_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('organization_name')) {
                obj['organization_name'] = ApiClient.convertToType(data['organization_name'], 'String');
            }
            if (data.hasOwnProperty('nationality')) {
                obj['nationality'] = ApiClient.convertToType(data['nationality'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('government_ids')) {
                obj['government_ids'] = ApiClient.convertToType(data['government_ids'], [GovernmentIds]);
            }
            if (data.hasOwnProperty('date_of_birth')) {
                obj['date_of_birth'] = ApiClient.convertToType(data['date_of_birth'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sender</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sender</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['middle_name'] && !(typeof data['middle_name'] === 'string' || data['middle_name'] instanceof String)) {
            throw new Error("Expected the field `middle_name` to be a primitive type in the JSON string but got " + data['middle_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['organization_name'] && !(typeof data['organization_name'] === 'string' || data['organization_name'] instanceof String)) {
            throw new Error("Expected the field `organization_name` to be a primitive type in the JSON string but got " + data['organization_name']);
        }
        // ensure the json data is a string
        if (data['nationality'] && !(typeof data['nationality'] === 'string' || data['nationality'] instanceof String)) {
            throw new Error("Expected the field `nationality` to be a primitive type in the JSON string but got " + data['nationality']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        if (data['government_ids']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['government_ids'])) {
                throw new Error("Expected the field `government_ids` to be an array in the JSON data but got " + data['government_ids']);
            }
            // validate the optional field `government_ids` (array)
            for (const item of data['government_ids']) {
                GovernmentIds.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['date_of_birth'] && !(typeof data['date_of_birth'] === 'string' || data['date_of_birth'] instanceof String)) {
            throw new Error("Expected the field `date_of_birth` to be a primitive type in the JSON string but got " + data['date_of_birth']);
        }

        return true;
    }


}



/**
 * This parameter contains the consumer's first name for transactions where the sender is a person. For transactions where the sender is not a person, this field is not allowed.  Note that this parameter is required for transactions where the sender is a person, i.e. the value of quoterequest or paymentrequest.payment_type is P2P or P2B. Providing this with other payment types will cause an error.  It is a conditional parameter that holds a string of alphanumeric special characters with a maximum length of 140 and a minimum length of 1.
 * @member {String} first_name
 */
Sender.prototype['first_name'] = undefined;

/**
 * This parameter contains the consumer's middle name for transactions where the sender is a person. For transactions where the sender is not a person, this field is not allowed.  Note that this parameter is optional for transactions where the sender is a person, i.e. the value of quoterequest or paymentrequest.payment_type is P2P or P2B. Providing this with other payment types will cause an error.  It is an optional parameter that holds a string of alphanumeric special characters with a maximum length of 140 and a minimum length of 1.
 * @member {String} middle_name
 */
Sender.prototype['middle_name'] = undefined;

/**
 * This parameter contains the consumer's last name for transactions where the sender is a person. For transactions where the sender is not a person, this field is not allowed.  Note that this parameter is required for transactions where the sender is a person, i.e. the value of quoterequest or paymentrequest.payment_type is P2P, P2B. Providing this with other payment types will cause an error.  It is a conditional parameter that holds a string of alphanumeric special characters with a maximum length of 140 and a minimum length of 1.
 * @member {String} last_name
 */
Sender.prototype['last_name'] = undefined;

/**
 * This parameter contains the organization's name for transactions where the sender is not a person. For transactions where the sender is a person, this field is not allowed.  Note that this parameter is required for transactions where the sender is an organization, i.e. the value of quoterequest or paymentrequest.payment_type is B2B, B2P, G2P. Providing this with other payment types will cause an error.  It is a conditional parameter that holds a string of alphanumeric special characters with a maximum length of 140 and a minimum length of 1.
 * @member {String} organization_name
 */
Sender.prototype['organization_name'] = undefined;

/**
 * For transactions where the sender is a person, this is the sending consumer's nationality. This parameter contains the three-letter \"ISO 3166-1 alpha-3\" country code representing the sender's nationality. In the case of a business or government organization, this is the registered country of the organization.  It holds a string of alphabet characters with an exact length of three.
 * @member {String} nationality
 */
Sender.prototype['nationality'] = undefined;

/**
 * @member {module:model/Address} address
 */
Sender.prototype['address'] = undefined;

/**
 * List of sender government ids. Note: There can be 0 to many of these fields required and used for each transaction.
 * @member {Array.<module:model/GovernmentIds>} government_ids
 */
Sender.prototype['government_ids'] = undefined;

/**
 * In case of Person: Sender's Date of Birth  In case of Business or Government Organization: Date of Establishment or Incorporation  It is an optional parameter that holds an \"ISO 8601\" date of the format YYYY-MM-DD.
 * @member {String} date_of_birth
 */
Sender.prototype['date_of_birth'] = undefined;






export default Sender;

