/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Data from './Data';

/**
 * The AdditionalDataList model module.
 * @module model/AdditionalDataList
 * @version 1.0.0
 */
class AdditionalDataList {
    /**
     * Constructs a new <code>AdditionalDataList</code>.
     * This parameter contains the list of name/value pairs containing additional parameter values. It is a conditional parameter where there can be zero to many fields sent in the payload. The number of fields, and when they are required, is based on the specific RSP and transaction type.
     * @alias module:model/AdditionalDataList
     */
    constructor() { 
        
        AdditionalDataList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalDataList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalDataList} obj Optional instance to populate.
     * @return {module:model/AdditionalDataList} The populated <code>AdditionalDataList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalDataList();

            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('item_count')) {
                obj['item_count'] = ApiClient.convertToType(data['item_count'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = Data.constructFromObject(data['data']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalDataList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalDataList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['item_count'] && !(typeof data['item_count'] === 'string' || data['item_count'] instanceof String)) {
            throw new Error("Expected the field `item_count` to be a primitive type in the JSON string but got " + data['item_count']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          Data.validateJSON(data['data']);
        }

        return true;
    }


}



/**
 * This parameter contains the type of additional data list resource type. Note that it is provided if additional_data_list is populated.    It is conditional and will only hold a string with the value \\\"list\\\". 
 * @member {String} resource_type
 */
AdditionalDataList.prototype['resource_type'] = undefined;

/**
 * This parameter contains the number of items in additional_data_list. Note it is provided if additional_data_list is populated.    It is conditional and holds a numeric value with a maximum length of two and a minimum length of one.
 * @member {String} item_count
 */
AdditionalDataList.prototype['item_count'] = undefined;

/**
 * @member {module:model/Data} data
 */
AdditionalDataList.prototype['data'] = undefined;






export default AdditionalDataList;

