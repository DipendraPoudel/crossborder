/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Forward model module.
 * @module model/Forward
 * @version 1.0.0
 */
class Forward {
    /**
     * Constructs a new <code>Forward</code>.
     * @alias module:model/Forward
     */
    constructor() { 
        
        Forward.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Forward</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Forward} obj Optional instance to populate.
     * @return {module:model/Forward} The populated <code>Forward</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Forward();

            if (data.hasOwnProperty('fees_included')) {
                obj['fees_included'] = ApiClient.convertToType(data['fees_included'], 'String');
            }
            if (data.hasOwnProperty('receiver_currency')) {
                obj['receiver_currency'] = ApiClient.convertToType(data['receiver_currency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Forward</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Forward</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fees_included'] && !(typeof data['fees_included'] === 'string' || data['fees_included'] instanceof String)) {
            throw new Error("Expected the field `fees_included` to be a primitive type in the JSON string but got " + data['fees_included']);
        }
        // ensure the json data is a string
        if (data['receiver_currency'] && !(typeof data['receiver_currency'] === 'string' || data['receiver_currency'] instanceof String)) {
            throw new Error("Expected the field `receiver_currency` to be a primitive type in the JSON string but got " + data['receiver_currency']);
        }

        return true;
    }


}



/**
 * This parameter indicates how payment fees will be paid. If true, fees are subtracted from the sender's amount. If false, then the sender will pay fees in addition to the sender's amount.   Note that if no type is used then it defaults to forward type with the fees_included field set to \"true\". A forward and a reverse type shouldn't be used together. Using forward.fees_included along with reverse.sender_currency throws an error.  It's an optional parameter that holds a Boolean value. Valid values are \"true\" or \"false\". 
 * @member {String} fees_included
 */
Forward.prototype['fees_included'] = undefined;

/**
 * This parameter contains the three-letter \"ISO 4217\" currency code of the account to receive the funds. This parameter is required for forward type where the beneficiary Account uri = pan.  It's an optional parameter that holds alphabet characters with an exact length of three.
 * @member {String} receiver_currency
 */
Forward.prototype['receiver_currency'] = undefined;






export default Forward;

