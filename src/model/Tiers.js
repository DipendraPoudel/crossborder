/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tier from './Tier';

/**
 * The Tiers model module.
 * @module model/Tiers
 * @version 1.0.0
 */
class Tiers {
    /**
     * Constructs a new <code>Tiers</code>.
     * See child attributes
     * @alias module:model/Tiers
     */
    constructor() { 
        
        Tiers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tiers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tiers} obj Optional instance to populate.
     * @return {module:model/Tiers} The populated <code>Tiers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tiers();

            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], [Tier]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tiers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tiers</code>.
     */
    static validateJSON(data) {
        if (data['tier']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tier'])) {
                throw new Error("Expected the field `tier` to be an array in the JSON data but got " + data['tier']);
            }
            // validate the optional field `tier` (array)
            for (const item of data['tier']) {
                Tier.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * See child attributes
 * @member {Array.<module:model/Tier>} tier
 */
Tiers.prototype['tier'] = undefined;






export default Tiers;

