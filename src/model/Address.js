/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address model module.
 * @module model/Address
 * @version 1.0.0
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * For transactions where there is a person, this is the address of the person. For transactions where there is no person, this is the address for the business/entity 
     * @alias module:model/Address
     * @param country {String} This parameter contains the three-letter \"ISO 3166-1 alpha-3\" country code of the person. When it is not a person, this is the country of the business/entity.Â  (City, state, zip code, or other address elements must not be added to this field or transactions rejections may occur)  This parameter holds a string of alphabet characters with an exact length of three.
     * @param line1 {String} This parameter contains the value in address line 1 of the person. For transactions where it is not a person, this is address line 1 for the business/entity.Â  This field should contain the following components of the address only (each part as applicable): Physical address number, Directional indicators (N, W, SW, etc), Street Name, Thoroughfare type (LN, BLVD. etc).Â  (City, State, zip code, or other address elements must not be added to this field or transactions rejections may occur)  It holds a string of alphanumeric special characters with a maximum length of 500 and a minimum length of 1.
     */
    constructor(country, line1) { 
        
        Address.initialize(this, country, line1);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, line1) { 
        obj['country'] = country;
        obj['line1'] = line1;
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('country_subdivision')) {
                obj['country_subdivision'] = ApiClient.convertToType(data['country_subdivision'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Address.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['country_subdivision'] && !(typeof data['country_subdivision'] === 'string' || data['country_subdivision'] instanceof String)) {
            throw new Error("Expected the field `country_subdivision` to be a primitive type in the JSON string but got " + data['country_subdivision']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }

        return true;
    }


}

Address.RequiredProperties = ["country", "line1"];

/**
 * This parameter contains the city where the person resides. For transactions where it is not a person, this is the city where the business/entity resides.Â  (State, zip code, or other address elements must not be added to this field or transactions rejections may occur)  It holds a string of alphanumeric special characters with a maximum length of 35 and a minimum length of 1
 * @member {String} city
 */
Address.prototype['city'] = undefined;

/**
 * This parameter contains the postal code of the person. For transactions where it is not a person, this is the postal code of the Business/Entity. This parameter is only required for countries that use postal codes.  This parameter holds a string of alphanumeric special characters with a maximum length of 16 and a minimum length of 1.
 * @member {String} postal_code
 */
Address.prototype['postal_code'] = undefined;

/**
 * This parameter contains the state/province of the person. For transactions where it is a Business/Entity, this is the state/province where the business/entity resides. For Countries that do not have a country subdivision, this field should not be provided in the payment request.Â  (City, zip code, or other address elements must not be added to this field or transactions rejections may occur)  This parameter holds a string of alphanumeric special characters with a maximum length of 35 and a minimum length of 2.
 * @member {String} country_subdivision
 */
Address.prototype['country_subdivision'] = undefined;

/**
 * This parameter contains the three-letter \"ISO 3166-1 alpha-3\" country code of the person. When it is not a person, this is the country of the business/entity.Â  (City, state, zip code, or other address elements must not be added to this field or transactions rejections may occur)  This parameter holds a string of alphabet characters with an exact length of three.
 * @member {String} country
 */
Address.prototype['country'] = undefined;

/**
 * This parameter contains the value in address line 2 of the person. For transactions where it is not a person, this is address line 2 for the business/entity.Â  This field should contain additional information about the address only (as applicable): Apartment/room/suite identifier. (City, State, zip code, or other address elements must not be added to this field or transactions rejections may occur)  It holds a string of alphanumeric special characters with a maximum length of 500 and a minimum length of 1
 * @member {String} line2
 */
Address.prototype['line2'] = undefined;

/**
 * This parameter contains the value in address line 1 of the person. For transactions where it is not a person, this is address line 1 for the business/entity.Â  This field should contain the following components of the address only (each part as applicable): Physical address number, Directional indicators (N, W, SW, etc), Street Name, Thoroughfare type (LN, BLVD. etc).Â  (City, State, zip code, or other address elements must not be added to this field or transactions rejections may occur)  It holds a string of alphanumeric special characters with a maximum length of 500 and a minimum length of 1.
 * @member {String} line1
 */
Address.prototype['line1'] = undefined;






export default Address;

