/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Proposals from './Proposals';

/**
 * The Quote model module.
 * @module model/Quote
 * @version 1.0.0
 */
class Quote {
    /**
     * Constructs a new <code>Quote</code>.
     * Response details
     * @alias module:model/Quote
     */
    constructor() { 
        
        Quote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Quote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Quote} obj Optional instance to populate.
     * @return {module:model/Quote} The populated <code>Quote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Quote();

            if (data.hasOwnProperty('transaction_reference')) {
                obj['transaction_reference'] = ApiClient.convertToType(data['transaction_reference'], 'String');
            }
            if (data.hasOwnProperty('proposals')) {
                obj['proposals'] = Proposals.constructFromObject(data['proposals']);
            }
            if (data.hasOwnProperty('payment_type')) {
                obj['payment_type'] = ApiClient.convertToType(data['payment_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Quote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Quote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['transaction_reference'] && !(typeof data['transaction_reference'] === 'string' || data['transaction_reference'] instanceof String)) {
            throw new Error("Expected the field `transaction_reference` to be a primitive type in the JSON string but got " + data['transaction_reference']);
        }
        // validate the optional field `proposals`
        if (data['proposals']) { // data not null
          Proposals.validateJSON(data['proposals']);
        }
        // ensure the json data is a string
        if (data['payment_type'] && !(typeof data['payment_type'] === 'string' || data['payment_type'] instanceof String)) {
            throw new Error("Expected the field `payment_type` to be a primitive type in the JSON string but got " + data['payment_type']);
        }

        return true;
    }


}



/**
 * This parameter contains the client provided unique reference number.  It holds alphanumeric special characters with a maximum length of 40 and a minimum length of 1.
 * @member {String} transaction_reference
 */
Quote.prototype['transaction_reference'] = undefined;

/**
 * @member {module:model/Proposals} proposals
 */
Quote.prototype['proposals'] = undefined;

/**
 * This parameter contains a three-digit code for the type of transaction that is being submitted. Available types and their uses are provided below:  B2P: Business Disbursement to Person - A disbursement of funds from a business to an individual account.  B2B: Business to Business- A transfer of funds from one business to another.  G2P: Government to Person - A disbursement of funds from a government agency to a private individual person's account.  P2P: Person to Person - A transfer of funds from one private individual person's account to another private individual person's account.  P2B: Person to Business - A payment by an individual person to a business  It holds a string of alphabet characters with an exact length of three.
 * @member {String} payment_type
 */
Quote.prototype['payment_type'] = undefined;






export default Quote;

