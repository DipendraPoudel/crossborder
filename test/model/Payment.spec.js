/**
 * Crossborder
 * MasterCard Cross-Border Services enables banks in their capacity as Originating Institutions to send cross-border payments for various payment types including person-to-person payments (P2P), person-to-business payments (P2B), business-to-person disbursements (B2P), business-to-business payments (B2B), and government-to-person disbursement (G2P). Mastercard Cross-Border Services supports a variety of payout options, including bank accounts, mobile money accounts, consumer cards, and retail cash pick-up.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Crossborder);
  }
}(this, function(expect, Crossborder) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Crossborder.Payment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Payment', function() {
    it('should create an instance of Payment', function() {
      // uncomment below and update the code to test Payment
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be.a(Crossborder.Payment);
    });

    it('should have the property transactionReference (base name: "transaction_reference")', function() {
      // uncomment below and update the code to test the property transactionReference
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property resourceType (base name: "resource_type")', function() {
      // uncomment below and update the code to test the property resourceType
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property proposalId (base name: "proposal_id")', function() {
      // uncomment below and update the code to test the property proposalId
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property statusTimestamp (base name: "status_timestamp")', function() {
      // uncomment below and update the code to test the property statusTimestamp
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property pendingStage (base name: "pending_stage")', function() {
      // uncomment below and update the code to test the property pendingStage
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property pendingMaxCompletionDate (base name: "pending_max_completion_date")', function() {
      // uncomment below and update the code to test the property pendingMaxCompletionDate
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property feesAmount (base name: "fees_amount")', function() {
      // uncomment below and update the code to test the property feesAmount
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property chargedAmount (base name: "charged_amount")', function() {
      // uncomment below and update the code to test the property chargedAmount
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property creditedAmount (base name: "credited_amount")', function() {
      // uncomment below and update the code to test the property creditedAmount
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property principalAmount (base name: "principal_amount")', function() {
      // uncomment below and update the code to test the property principalAmount
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property senderAccountUri (base name: "sender_account_uri")', function() {
      // uncomment below and update the code to test the property senderAccountUri
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property recipientAccountUri (base name: "recipient_account_uri")', function() {
      // uncomment below and update the code to test the property recipientAccountUri
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property paymentAmount (base name: "payment_amount")', function() {
      // uncomment below and update the code to test the property paymentAmount
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property paymentOriginationCountry (base name: "payment_origination_country")', function() {
      // uncomment below and update the code to test the property paymentOriginationCountry
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property fxType (base name: "fx_type")', function() {
      // uncomment below and update the code to test the property fxType
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property receivingBankName (base name: "receiving_bank_name")', function() {
      // uncomment below and update the code to test the property receivingBankName
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property receivingBankBranchName (base name: "receiving_bank_branch_name")', function() {
      // uncomment below and update the code to test the property receivingBankBranchName
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property bankCode (base name: "bank_code")', function() {
      // uncomment below and update the code to test the property bankCode
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property paymentType (base name: "payment_type")', function() {
      // uncomment below and update the code to test the property paymentType
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property sourceOfIncome (base name: "source_of_income")', function() {
      // uncomment below and update the code to test the property sourceOfIncome
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property settlementDetails (base name: "settlement_details")', function() {
      // uncomment below and update the code to test the property settlementDetails
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property cashoutCode (base name: "cashout_code")', function() {
      // uncomment below and update the code to test the property cashoutCode
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property fxRate (base name: "fx_rate")', function() {
      // uncomment below and update the code to test the property fxRate
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property additionalDataList (base name: "additional_data_list")', function() {
      // uncomment below and update the code to test the property additionalDataList
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property paymentFileIdentifier (base name: "payment_file_identifier")', function() {
      // uncomment below and update the code to test the property paymentFileIdentifier
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

    it('should have the property cardRateId (base name: "card_rate_id")', function() {
      // uncomment below and update the code to test the property cardRateId
      //var instance = new Crossborder.Payment();
      //expect(instance).to.be();
    });

  });

}));
